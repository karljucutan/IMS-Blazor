@page "/purchase"

@rendermode InteractiveServer

@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@inject IJSRuntime JSRuntime
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoriesByIdUseCase
@inject IPurchaseInventoryUseCase PuchaseInventoryUseCase

<h3>Purchase Inventory</h3>
<br />

<EditForm id="purchaseInventoryForm" Model="purchaseViewModel" OnValidSubmit="PurchaseAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Purchase Order</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PurchaseOrderNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Inventory to Purchase"
                                       SearchFunction="SearchInventoryAsync"
                                       OnItemSelected="HandleItemSelected"></AutoCompleteComponent>

                @if (purchaseViewModel.InventoryPrice > 0)
                {
                    <text>Price: @purchaseViewModel.InventoryPrice.ToString("c")</text>
                }
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>

@code {
    private PurchaseViewModel purchaseViewModel = new();
    private PurchaseOrderDTO purchaseOrderDTO = new();
    private Inventory? selectedInventory;

    #region sync implementation of SearchInventory
    // private List<ItemViewModel>? SearchInventory(string name)
    // {
    //     // this blocks the current thread
    //     var list = ViewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();
    //     if (list is null) return new List<ItemViewModel>();

    //     return list.Select(
    //         inventory => new ItemViewModel
    //             {
    //                 Id = inventory.InventoryId,
    //                 Name = inventory.InventoryName
    //             }).ToList();
    // }
    #endregion

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            // JS Interop preventFormSubmission manually created in jsinterop.js
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "purchaseInventoryForm");
        }
    }

    private async Task<List<ItemViewModel>> SearchInventoryAsync(string name)
    {
        var list = await ViewInventoriesByNameUseCase.ExecuteAsync(name);
        if (list is null) return new List<ItemViewModel>();

        return list.Select(
            inventory => new ItemViewModel
                {
                    Id = inventory.InventoryId,
                    Name = inventory.InventoryName
                }).ToList();
    }

    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedInventory = await ViewInventoriesByIdUseCase.ExecuteAsync(item.Id);

        purchaseViewModel.InventoryId = item.Id;
        purchaseViewModel.InventoryPrice = selectedInventory.Price;
    }

    private async Task PurchaseAsync()
    {
        purchaseOrderDTO.PurchaseNumber = purchaseViewModel.PurchaseOrderNumber;
        purchaseOrderDTO.Inventory = selectedInventory;
        purchaseOrderDTO.Quantity = purchaseViewModel.QuantityToPurchase;
        purchaseOrderDTO.DoneBy = "Karl";

        await PuchaseInventoryUseCase.ExecuteAsync(purchaseOrderDTO);
        purchaseViewModel = new();
        selectedInventory = null;
    }
}
