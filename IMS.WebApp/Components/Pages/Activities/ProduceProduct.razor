@page "/produce"
@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@attribute [Authorize(Policy = "Productions")]

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IProduceProductUseCase ProduceProductUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase

<h3>Produce Product</h3>
<br />

<EditForm id="produceProductForm" Model="produceViewModel" OnValidSubmit="ProduceAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Production #</label>
        <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Produce"
                                       SearchFunction="SearchProductAsync"
                                       OnItemSelected="HandleItemSelected"></AutoCompleteComponent>
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Produce</button>
</EditForm>


@code {
    private ProduceViewModel produceViewModel = new();
    private Product? selectedProduct;
    private AuthenticationState? authenticationState;

    protected async override Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            // JS Interop preventFormSubmission manually created in jsinterop.js
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "produceProductForm");
        }
    }

    private async Task<List<ItemViewModel>> SearchProductAsync(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (list is null) return new List<ItemViewModel>();

        return list.Select(
            product => new ItemViewModel
                {
                    Id = product.ProductId,
                    Name = product.ProductName
                }).ToList();
    }

    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        produceViewModel.ProductId = item.Id;
        produceViewModel.Product = selectedProduct;
    }

    private async Task ProduceAsync()
    {
        var applicationUserName = authenticationState.User.Identity.Name;

        await ProduceProductUseCase.ExecuteAsync(
            produceViewModel.ProductionNumber,
            selectedProduct,
            produceViewModel.QuantityToProduce,
            applicationUserName);

        produceViewModel = new();
        selectedProduct = null;
    }
}
