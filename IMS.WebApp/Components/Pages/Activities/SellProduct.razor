@page "/sell"
@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@attribute [Authorize(Policy = "Sales")]

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject ISellProductUseCase SellProductUseCase

<h3>Sell Product</h3>
<br />

<EditForm id="sellProductForm" Model="sellViewModel" OnValidSubmit="SellAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Sales Order #</label>
        <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Sell"
                                       SearchFunction="SearchProductAsync"
                                       OnItemSelected="HandleItemSelected"></AutoCompleteComponent>
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="quantity">Unit Price</label>
        <InputNumber id="unitprice" @bind-Value="sellViewModel.UnitPrice" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Sell</button>
</EditForm>


@code {
    private SellViewModel sellViewModel = new();
    private Product? selectedProduct;
    private AuthenticationState? authenticationState;

    protected async override Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            // JS Interop preventFormSubmission manually created in jsinterop.js
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "sellProductForm");
        }
    }

    private async Task<List<ItemViewModel>> SearchProductAsync(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (list is null) return new List<ItemViewModel>();

        return list.Select(
            product => new ItemViewModel
                {
                    Id = product.ProductId,
                    Name = product.ProductName
                }).ToList();
    }

    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        sellViewModel.ProductId = item.Id;
        sellViewModel.Product = selectedProduct;
        sellViewModel.UnitPrice = selectedProduct.Price; // TODO check UnitPrice formula when changing quantity should be multiplied
    }

    private async Task SellAsync()
    {
        var applicationUserName = authenticationState.User.Identity.Name;

        // TODO: Application layer should use DTO.
        // Presentation (UI) layer should use ViewModel.
        // Persistence layer should use Entity.
        // ViewModel -> DTO -> Entity and vice versa
        await SellProductUseCase.ExecuteAsync(sellViewModel.SalesOrderNumber,
            selectedProduct,
            sellViewModel.QuantityToSell,
            sellViewModel.UnitPrice,
            applicationUserName);

        sellViewModel = new();
        selectedProduct = null;
    }
}

