@page "/editproduct/{ProductId:int}"

@attribute [Authorize]

@rendermode InteractiveServer

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>
<br />

@if (Product is not null)
{
    @* formname in editform is not needed in InteractiveServer rendermode *@
    <EditForm Model="Product" FormName="formProduct" OnValidSubmit="Update">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name"
                       @bind-Value="Product.ProductName"
                       class="form-control">
            </InputText>
            <ValidationMessage For="() => Product.ProductName"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity"
                         @bind-Value="Product.Quantity"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => Product.Quantity"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price"
                         @bind-Value="Product.Price"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => Product.Price"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="inventories">Inventories</label>
            <ProductInventoriesComponent Product="Product"></ProductInventoriesComponent>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Update</button>
        <a href="/products" class="btn btn-secondary">Cancel</a>
    </EditForm>
}

@code {
    private Product Product { get; set; } = new();

    [Parameter]
    public int ProductId { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        Product = await ViewProductByIdUseCase.ExecuteAsync(ProductId);
    }

    private async Task Update()
    {
        if (Product is not null)
        {
            await EditProductUseCase.ExecuteAsync(Product);
            NavigationManager.NavigateTo("/products");
        }
    }
}
