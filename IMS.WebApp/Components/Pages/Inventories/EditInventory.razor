@page "/editinventory/{InventoryId:int}"

@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IEditInventoryUseCase EditInventoryUseCase
@inject NavigationManager NavigationManager
@inject IMapper Mapper

<h3>Edit Inventory</h3>
<i class="fs-6 fst-italic">
    The "Edit inventory" page is currently <strong>rendered with static server-side rendering.</strong>
    After submitting the form, the page navigates to the inventories page, which <strong>triggers a full page refresh.</strong>
    By setting `Enhance="true"` on the &lt;EditForm&gt; component, you can enable partial page rendering,
    allowing the inventories page to be updated dynamically without a full page reload.
</i>

<br />
@if (InventoryViewModel is not null)
{
    <EditForm Model="InventoryViewModel" FormName="formInventory" OnValidSubmit="Update">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <InputNumber @bind-Value="InventoryViewModel.InventoryId" hidden></InputNumber>

        <div class="form-group">
            <label for="name">Inventory Name</label>
            <InputText id="name"
                       @bind-Value="InventoryViewModel.InventoryName"
                       class="form-control">
            </InputText>
            <ValidationMessage For="() => InventoryViewModel.InventoryName"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity"
                         @bind-Value="InventoryViewModel.Quantity"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => InventoryViewModel.Quantity"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price"
                         @bind-Value="InventoryViewModel.Price"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => InventoryViewModel.Price"></ValidationMessage>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Update</button>
        <a href="/inventories" class="btn btn-secondary">Cancel</a>
    </EditForm>
}

@code {
    [Parameter]
    public int InventoryId { get; set; }
    [SupplyParameterFromForm]
    private InventoryViewModel? InventoryViewModel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        InventoryViewModel ??= await ViewInventoryByIdUseCase.ExecuteAsync(InventoryId);
    }

    private async Task Update()
    {
        if (InventoryViewModel is not null)
        {
            await EditInventoryUseCase.ExecuteAsync(Mapper.Map<Inventory>(InventoryViewModel));
            NavigationManager.NavigateTo("/inventories");
        }
    }
}
