@page "/addinventory"

@attribute [Authorize]

@inject IAddInventoryUseCase AddInventoryUseCase
@inject NavigationManager NavigationManager
@inject IMapper Mapper

<h3>Add Inventory</h3>
<i class="fs-6 fst-italic">
    The "Add inventory" page is currently <strong>rendered with static server-side rendering.</strong>
    After submitting the form, the page navigates to the inventories page, which triggers a <strong>full page refresh.</strong>
    By setting `Enhance="true"` on the &lt;EditForm&gt; component, you can enable partial page rendering,
        allowing the inventories page to be updated dynamically without a full page reload.
</i>

<br />

<EditForm Model="InventoryViewModel" FormName="formInventory" OnValidSubmit="Save">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name"
                   @bind-Value="InventoryViewModel.InventoryName"
                   class="form-control">
        </InputText>
        <ValidationMessage For="() => InventoryViewModel.InventoryName"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
                     @bind-Value="InventoryViewModel.Quantity"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="() => InventoryViewModel.Quantity"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
                     @bind-Value="InventoryViewModel.Price"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="() => InventoryViewModel.Price"></ValidationMessage>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <a href="/inventories" class="btn btn-secondary">Cancel</a>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private InventoryViewModel InventoryViewModel { get; set; } = new();

    private async Task Save()
    {
        // reason for recurssion issue on Inventory Entity as per the course is due to it is Static Side Rendering, thats why it is changed to ViewModel
        await AddInventoryUseCase.ExecuteAsync(Mapper.Map<Inventory>(InventoryViewModel));

        NavigationManager.NavigateTo("/inventories");
    }
}
