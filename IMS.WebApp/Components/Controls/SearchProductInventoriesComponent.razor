@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="input-group">
    <input class="form-control"
           placeholder="Type something here to search"
           @bind-value="SearchFilter"
           @bind-value:event="oninput"/>
    <button type="button" class="btn-success input-group-text" @onclick="HandleSearchAsync">Search</button>
</div>

@if (inventories is not null && inventories.Any())
{
    <div class="search-result">
        <ul>
            @foreach (var inventory in inventories)
            {
                // The @key directive is used to optimize rendering performance by helping Blazor identify elements during updates,
                // similar to how indexing works for databases.
                <li @key="inventory.InventoryId"
                    @onclick="() => HandleSelectInventoryAsync(inventory)">
                    @inventory.InventoryName
                </li>
            }
        </ul>
    </div>
}

@code {
    // NOTE
    // EventCallback<T>
    // Purpose: EventCallback<T> is used to notify the parent component of an event happening in the child component. It follows the typical event-driven pattern where the child component informs the parent of an event, and the parent can handle it accordingly.
    // Usage: Primarily used for UI event handling such as button clicks, form submissions, etc.
    // Asynchronous: EventCallback is designed to support asynchronous operations, which is common in event handling scenarios.
    // Two-way Binding: Commonly used in scenarios where two-way data binding is required.
    [Parameter]
    public EventCallback<Inventory> OnInventorySelected { get; set; }

    private string _searchFilter = string.Empty;

    public string SearchFilter
    {
        get => _searchFilter;
        set
        {
            if (_searchFilter != value)
            {
                _searchFilter = value;
                //HandleSearch();

                HandleSearchAsync(); 
                //async call without await
            }
        }
    }

    private List<Inventory> inventories = new();

    private async void HandleSearch()
    {
        await HandleSearchAsync();
    }

    private async Task HandleSearchAsync()
    {
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(SearchFilter)).ToList();

        // StateHasChanged can be used if we will call an asynchronus call in the UI to notify the component of state changed.
        StateHasChanged();
    }

    private async Task HandleSelectInventoryAsync(Inventory inventory)
    {
        await OnInventorySelected.InvokeAsync(inventory);
        inventories.Clear();
    }
}