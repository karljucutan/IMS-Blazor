<div class="form-group">
    <label for="search">@Label</label>
    <input
        type="text"
        class="form-control"
        @bind-value="userInput"
        @bind-value:event="oninput"/>
</div>

@if (searchResults is not null && searchResults.Any())
{
    <div class="search-result">
        <ul>
            @foreach (var item in searchResults)
            {
                // The @key directive is used to optimize rendering performance by helping Blazor identify elements during updates,
                // similar to how indexing works for databases.
                <li @key="item.Id">
                    @item.Name
                </li>
            }
        </ul>
    </div>
}

@code {
    private string _userInput = string.Empty;
    private List<ItemViewModel>? searchResults = null;

    [Parameter]
    public string Label { get; set; } = string.Empty;


    // NOTE
    // Func<T, TResult>
    // Purpose: Func<T, TResult> is used to pass a function from the parent component to the child component.The child component can call this function to get some result based on the input.
    // Usage: Suitable for scenarios where the child component needs to delegate some processing to the parent component, like data fetching, complex calculations, etc.
    // Synchronous and Asynchronous: Func<T, TResult> is generally synchronous, but you can use Func<Task<TResult>> or similar for asynchronous operations.
    [Parameter]
    public Func<string, List<ItemViewModel>>? SearchFunction { get; set; }

    public string userInput 
    { 
        get => _userInput;
        set 
        {
            _userInput = value;

            if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction is not null)
                searchResults = SearchFunction(_userInput);
        } 
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;    
    }
}
