@page "/Account/ManageUser/{UserId}"
@using IMS.Plugins.Accounts.EFCoreSqlserver
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@attribute [Authorize(Policy = "Admin")]

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager

<h3>Manage User</h3>
<br />

@if (ViewModel is not null)
{
    <EditForm FormName="formManageUser" Model="ViewModel" OnValidSubmit="SaveUserAsync">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="email">Email</label>
            <input id="email"
                   type="text"
                   class="form-control"
                   readonly
                   value="@ViewModel.Email" />
        </div>
        <br />
        <div class="form-group">
            <label for="dp">Department</label>
            @ViewModel.Department
            <InputSelect id="dp" class="form-control" @bind-Value="@ViewModel.Department">
                <option value="">Select Department</option>
                <option value="Administration">Admin</option>
                <option value="InventoryManagement">Inventory Management</option>
                <option value="Sales">Sales</option>
                <option value="Purchasing">Purchasing</option>
                <option value="ProductManagement">Product Management</option>
                @* TODO: can use smart enums to get the values.*@
            </InputSelect>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="Account/ManageUsers" class="btn btn-secondary">Cancel</a>
    </EditForm>
}

@code {
    private const string DepartmentConstant = "Department";@* TODO: can use smart enums then use as the class name to get the value.*@

    [Parameter]
    public string? UserId { get; set; }

    private ApplicationUser? selectedUser;
    private Claim? departmentClaim;
    private bool userHasDepartment = true;

    [SupplyParameterFromForm]
    private ManageUserViewModel? ViewModel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        selectedUser = UserManager.Users.First(user => user.Id == UserId);
        var claims = await UserManager.GetClaimsAsync(selectedUser);
        departmentClaim = claims.FirstOrDefault(claim => claim.Type == DepartmentConstant);
        if (departmentClaim is null)
        {
            userHasDepartment = false;
            departmentClaim = new Claim(DepartmentConstant, string.Empty);
        }

        ViewModel ??= new()
            {
                Email = selectedUser.Email,
                Department = departmentClaim?.Value ?? string.Empty
            };
    }

    private async Task SaveUserAsync()
    {
        if (selectedUser is null || departmentClaim is null) return;

        if (userHasDepartment)
        {
            await UserManager.ReplaceClaimAsync(
            selectedUser,
            departmentClaim,
            new Claim(DepartmentConstant, ViewModel.Department));
        }
        else
        {
            await UserManager.AddClaimAsync(
                selectedUser,
                new Claim(DepartmentConstant, ViewModel.Department));
        }

        NavigationManager.NavigateTo("Account/ManagerUsers");
    }

    public class ManageUserViewModel
    {
        public string Email { get; set; }

        [Required]
        public string Department { get; set; }
    }
}
