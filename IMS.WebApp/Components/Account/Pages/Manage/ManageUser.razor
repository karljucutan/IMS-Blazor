@page "/account/manageuser/{UserId}"
@using IMS.Plugins.Accounts.EFCoreSqlserver
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@attribute [Authorize(Policy = "Admin")]

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager

<h3>Manage User</h3>
<br />

@if (ViewModel is not null)
{
    <EditForm FormName="formManageUser" Model="ViewModel" OnValidSubmit="SaveUserAsync">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="email">Email</label>
            <input id="email"
                   type="text"
                   class="form-control"
                   readonly
                   value="@ViewModel.Email" />
        </div>
        <br />
        <div class="form-group">
            <label for="dp">Department</label>
            <InputSelect id="dp" @bind-Value="ViewModel.Department" class="form-control">
                <option value="">Select Department</option>
                @foreach (var option in departmentOptions)
                {
                    <option value="@option.Value">@option.Text</option>
                }
            </InputSelect>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="account/manageUsers" class="btn btn-secondary">Cancel</a>
    </EditForm>
}

@code {
    private const string DepartmentConstant = "Department";@* TODO: can use smart enums then use as the class name to get the value.*@

    [Parameter]
    public string? UserId { get; set; }

    private ApplicationUser? selectedUser;
    private Claim? departmentClaim;
    private bool userHasDepartment = true;
    [SupplyParameterFromForm]
    private ManageUserViewModel? ViewModel { get; set; }

    private List<SelectListItem> departmentOptions = new()
    {
        new SelectListItem { Value = "Administration", Text = "Admin" },
        new SelectListItem { Value = "InventoryManagement", Text = "Inventory Management" },
        new SelectListItem { Value = "Sales", Text = "Sales" },
        new SelectListItem { Value = "Purchasing", Text = "Purchasing" },
        new SelectListItem { Value = "ProductionManagement", Text = "Production Management" }
    };

    protected override async Task OnParametersSetAsync()
    {
        selectedUser = UserManager.Users.First(user => user.Id == UserId);
        var claims = await UserManager.GetClaimsAsync(selectedUser);
        departmentClaim = claims.FirstOrDefault(claim => claim.Type == DepartmentConstant);
        if (departmentClaim is null)
        {
            userHasDepartment = false;
            departmentClaim = new Claim(DepartmentConstant, string.Empty);
        }

        ViewModel ??= new()
            {
                Email = selectedUser.Email,
                Department = departmentClaim?.Value ?? string.Empty
            };
    }

    private async Task SaveUserAsync()
    {
        if (selectedUser is null || departmentClaim is null) return;

        if (userHasDepartment)
        {
            await UserManager.ReplaceClaimAsync(
                selectedUser,
                departmentClaim,
                new Claim(DepartmentConstant, ViewModel.Department));
        }
        else
        {
            await UserManager.AddClaimAsync(
                selectedUser,
                new Claim(DepartmentConstant, ViewModel.Department));
        }

        NavigationManager.NavigateTo("account/manageusers");
    }

    public class ManageUserViewModel
    {
        public string Email { get; set; }

        [Required]
        public string Department { get; set; }
    }

    public class SelectListItem
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }
}
